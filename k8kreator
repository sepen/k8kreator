#!/usr/bin/env bash

# =============================================================================
# helper functions
# =============================================================================

k8kreator-msg-debug() {
  local msgprefix='\033[1;33m**'
  local msgsuffix='\033[0m'
  if [ ${K8KREATOR_DEBUG} -eq 1 ]; then
    [ ${K8KREATOR_NOCOLOR} -eq 1 ] && msgprefix='[debug]'
    echo -e "${msgprefix}${msgsuffix} $@"
  fi
}

k8kreator-msg-info() {
  local msgprefix='\033[1;34m**'
  local msgsuffix='\033[0m'
  [ ${K8KREATOR_NOCOLOR} -eq 1 ] && msgprefix='**'
  echo -e "${msgprefix}${msgsuffix} $@"
}

k8kreator-msg-error() {
  local msgprefix='\033[1;31m**'
  local msgsuffix='\033[0m'
  [ ${K8KREATOR_NOCOLOR} -eq 1 ] && msgprefix='[error]'
  echo -e "${msgprefix}${msgsuffix} $@" 2>&1
  exit 1
}

k8kreator-msg-help() {
  cat << __help__
Usage: k8kreator [command] [action] <flags>

Where commands and their actions are:
  k8kreator self    [ install | update ]
  k8kreator cluster [ list | create | delete ]
  k8kreator addons  [ list | install | update | uninstall ]
  k8kreator tools   [ list | install | select | uninstall ]
  k8kreator help

Additional flags:
  -t <target>           Cluster target. Overrides K8KREATOR_TARGET from environment

Environment vars:
  K8KREATOR_DEBUG       0-Enable/1-Disable debugging messages (current: "${K8KREATOR_DEBUG}")
  K8KREATOR_NOCOLOR     0-Enable/1-Disable color ouput (current: "${K8KREATOR_NOCOLOR}")
  K8KREATOR_TARGET      Cluster target (current: "${K8KREATOR_TARGET}")
__help__
  exit 0
}

k8kreator-check-deps() {
  for dep in $@; do
    # Search for the given executable in PATH (avoids a dependency on the `which` command)
    if ! type -P $dep >/dev/null 2>&1; then
      k8kreator-msg-error "Dependency '$dep' not found."
    fi
  done
}

k8kreator-get-engine() {
  local name_and_engine="${K8KREATOR_TARGET%.*}" # example: default.kind
  echo "${name_and_engine#*.}" # example: kind
}

k8kreator-get-tool-command() {
  local tool_name=$1
  # it returns tool command and version (example: kubectl-1.27.4, helm-3.12.3, etc.)
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  for tool in ${K8KREATOR_TOOLS[@]}; do
    case ${tool} in
      ${tool_name}=*) echo "${tool_name}-${tool##*=}" ;;
    esac
  done
}

# =============================================================================
# k8kreator self
# =============================================================================

k8kreator-self-install() {
  k8kreator-check-deps "mkdir" "git" "ln"
  if [ -d ${K8KREATOR_SRCDIR} ]; then
    k8kreator-msg-error "k8kreator previously installed. Please remove it or run 'self update' command."
  fi
  k8kreator-msg-debug "Installing ${K8KREATOR_SRCDIR}"
  mkdir -p ${K8KREATOR_BINDIR} ${K8KREATOR_TMPDIR}
  git clone ${K8KREATOR_GITHUB_REPO} ${K8KREATOR_SRCDIR} --quiet
  ln -svf ../src/k8kreator ${K8KREATOR_BINDIR}/k8kreator
  k8kreator-msg-info "Installed successfully!"
  k8kreator-msg-info "IMPORTANT: To finish do you need to add binaries to your PATH as for example:"
  k8kreator-msg-info "  export PATH=\$HOME/.k8kreator/bin:\$PATH"
}

k8kreator-self-update() {
  k8kreator-check-deps "git"
  if [ ! -d ${K8KREATOR_SRCDIR} ]; then
    k8kreator-msg-error "Cannot update k8kreator. You need to install it first."
  fi
  k8kreator-msg-debug "Updating ${K8KREATOR_SRCDIR}"
  cd ${K8KREATOR_SRCDIR} && git pull --rebase origin main --quiet
  k8kreator-msg-info "Updated successfully!"
}

# =============================================================================
# k8kreator cluster
# =============================================================================

k8kreator-cluster-list() {
  k8kreator-msg-debug "Running function k8kreator-cluster-list (${K8KREATOR_TARGET})"
  k8kreator-check-deps "find"
  k8kreator-msg-info "Listing available cluster targets:"
  find ${K8KREATOR_SRCDIR}/targets -mindepth 1 -maxdepth 1 -type d -exec basename {} \; \
  | while read target; do
    case ${target} in
      "${K8KREATOR_TARGET}") printf "%-40s [*]\n" ${target} ;;
      *) printf "%-40s [ ]\n" ${target} ;;
    esac
  done
}

k8kreator-cluster-create() {
  k8kreator-msg-debug "Running function k8kreator-cluster-create (${K8KREATOR_TARGET})"
  if [ ! -f ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/target.sh ]; then
    k8kreator-msg-error "Cluster target not found ${K8KREATOR_TARGET}"
  fi
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/target.sh
  k8kreator-msg-info "Installing and selecting tools"
  k8kreator-tools-install
  k8kreator-tools-select
  k8kreator-msg-info "Creating cluster ${K8KREATOR_TARGET}"
  k8kreator-cluster-create-target
  k8kreator-msg-info "Created successfully!"
  k8kreator-msg-info "IMPORTANT: To finish do you need to export KUBECONFIG as for example:"
  k8kreator-msg-info "  export KUBECONFIG=\$HOME/.k8kreator/kubeconfig"
}

k8kreator-cluster-delete() {
  k8kreator-msg-debug "Running function k8kreator-cluster-delete (${K8KREATOR_TARGET})"
  if [ ! -f ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/target.sh ]; then
    k8kreator-msg-error "Cluster target not found ${K8KREATOR_TARGET}"
  fi
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/target.sh
  k8kreator-msg-info "Deleting cluster ${K8KREATOR_TARGET}"
  k8kreator-cluster-delete-target
  k8kreator-msg-info "Uninstalling tools"
  k8kreator-tools-uninstall
  k8kreator-msg-info "Deleted successfully!"
}

# =============================================================================
# k8kreator addons
# =============================================================================

k8kreator-addons-list() {
  k8kreator-msg-debug "Running function k8kreator-addons-list (${K8KREATOR_TARGET})"
  k8kreator-check-deps "find"
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  k8kreator-msg-info "Listing addons for target ${K8KREATOR_TARGET}:"
  find ${K8KREATOR_SRCDIR}/addons -mindepth 1 -maxdepth 1 -type d -exec basename {} \; \
  | while read available_addon_name; do
    # Check if the addon is available for selected target
    for target_addon in ${K8KREATOR_ADDONS[@]}; do
      case ${target_addon} in
        ${available_addon_name}=*)
          target_addon_name=${target_addon%%=*}
          target_addon_version=${target_addon##*=}
          printf "%-20s  %s\n" ${target_addon_name} ${target_addon_version}
          ;;
      esac
    done
  done
}

k8kreator-addons-install() {
  k8kreator-msg-debug "Running function k8kreator-addons-install $@ (${K8KREATOR_TARGET})"
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  for addon in ${K8KREATOR_ADDONS[@]}; do
    addon_name=${addon%%=*}
    addon_version=${addon##*=}
    if [ ! -f ${K8KREATOR_SRCDIR}/addons/${addon_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${addon_name}"
    fi
    source ${K8KREATOR_SRCDIR}/addons/${addon_name}.sh
    k8kreator-msg-info "Installing addon ${addon_name} ${addon_version}"
    k8kreator-addons-install-${addon_name} ${addon_version} || break
  done
}

k8kreator-addons-update() {
  k8kreator-msg-debug "Running function k8kreator-addons-update $@ (${K8KREATOR_TARGET})"
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  for addon in ${K8KREATOR_ADDONS[@]}; do
    addon_name=${addon%%=*}
    addon_version=${addon##*=}
    if [ ! -f ${K8KREATOR_SRCDIR}/addons/${addon_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${addon_name}"
    fi
    source ${K8KREATOR_SRCDIR}/addons/${addon_name}.sh
    k8kreator-msg-info "Updating addon ${addon_name} ${addon_version}"
    k8kreator-addons-update-${addon_name} ${addon_version} || break
  done
}

k8kreator-addons-uninstall() {
  k8kreator-msg-debug "Running function k8kreator-addons-uninstall $@ (${K8KREATOR_TARGET})"
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  for addon in ${K8KREATOR_ADDONS[@]}; do
    addon_name=${addon%%=*}
    addon_version=${addon##*=}
    if [ ! -f ${K8KREATOR_SRCDIR}/addons/${addon_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${addon_name}"
    fi
    source ${K8KREATOR_SRCDIR}/addons/${addon_name}.sh
    k8kreator-msg-info "Uninstalling addon ${addon_name} ${addon_version}"
    k8kreator-addons-uninstall-${addon_name} ${addon_version} || break
  done
}

# =============================================================================
# k8kreator tools
# =============================================================================

k8kreator-tools-list() {
  k8kreator-msg-debug "Running function k8kreator-tools-list (${K8KREATOR_TARGET})"
  k8kreator-check-deps "find"
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  k8kreator-msg-info "Listing tools for target ${K8KREATOR_TARGET}:"
  find ${K8KREATOR_SRCDIR}/tools -type f -name '*.sh' -exec basename {} .sh \; \
  | while read available_tool_name; do
    # Check if the tool is available for selected target
    for target_tool in ${K8KREATOR_TOOLS[@]}; do
      case ${target_tool} in
        ${available_tool_name}*)
          target_tool_name=${target_tool%%=*}
          target_tool_version=${target_tool##*=}
          printf "%-20s  %s\n" ${target_tool_name} ${target_tool_version}
          ;;
      esac
    done
  done

}

k8kreator-tools-install() {
  k8kreator-msg-debug "Running function k8kreator-tools-install (${K8KREATOR_TARGET})"
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  for tool in ${K8KREATOR_TOOLS[@]}; do
    tool_name=${tool%%=*}
    tool_version=${tool##*=}
    if [ ! -f ${K8KREATOR_SRCDIR}/tools/${tool_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${tool_name}"
    fi
    source ${K8KREATOR_SRCDIR}/tools/${tool_name}.sh
    k8kreator-msg-info "Installing tool ${tool_name} ${tool_version}"
    k8kreator-tools-install-${tool_name} ${tool_version} || break
  done
}

k8kreator-tools-select() {
  k8kreator-msg-debug "Running function k8kreator-tools-select (${K8KREATOR_TARGET})"
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  for tool in ${K8KREATOR_TOOLS[@]}; do
    tool_name=${tool%%=*}
    tool_version=${tool##*=}
    if [ ! -f ${K8KREATOR_SRCDIR}/tools/${tool_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${tool_name}"
    fi
    source ${K8KREATOR_SRCDIR}/tools/${tool_name}.sh
    k8kreator-msg-info "Selecting tool ${tool_name} ${tool_version}"
    k8kreator-tools-select-${tool_name} ${tool_version} || break
  done
}

k8kreator-tools-uninstall() {
  k8kreator-msg-debug "Running function k8kreator-tools-uninstall (${K8KREATOR_TARGET})"
  source ${K8KREATOR_SRCDIR}/targets/${K8KREATOR_TARGET}/env.sh
  for tool in ${K8KREATOR_TOOLS[@]}; do
    tool_name=${tool%%=*}
    tool_version=${tool##*=}
    if [ ! -f ${K8KREATOR_SRCDIR}/tools/${tool_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${tool_name}"
    fi
    source ${K8KREATOR_SRCDIR}/tools/${tool_name}.sh
    k8kreator-msg-info "Uninstalling tool ${tool_name} ${tool_version}"
    k8kreator-tools-uninstall-${tool_name} ${tool_version} || break
  done
}

# =============================================================================
# k8kreator main
# =============================================================================

# Fail fast with a concise message when not using bash
if [ -z "${BASH_VERSION:-}" ]; then
  k8kreator-msg-error "Bash is required to interpret this script"
fi

# Readonly variables
readonly K8KREATOR_DEBUG=${K8KREATOR_DEBUG:-0}
readonly K8KREATOR_NOCOLOR=${K8KREATOR_NOCOLOR:-0}
readonly K8KREATOR_HOME="${K8KREATOR_HOME:-${HOME}/.k8kreator}"
readonly K8KREATOR_BINDIR="${K8KREATOR_BINDIR:-${K8KREATOR_HOME}/bin}"
readonly K8KREATOR_SRCDIR="${K8KREATOR_SRCDIR:-${K8KREATOR_HOME}/src}"
readonly K8KREATOR_TMPDIR="${K8KREATOR_TMPDIR:-${K8KREATOR_HOME}/tmp}"
readonly K8KREATOR_GITHUB_REPO="https://github.com/sepen/k8kreator"

# Obtain target from environment or input command args, otherwise use defaults.
export K8KREATOR_TARGET=${K8KREATOR_TARGET:-default.kind.local}

# Check for args
[ $# -eq 0 ] && k8kreator-msg-help

# Get target and save the rest to an array
userinput=()
while [ $1 ]; do
  case $1 in
    -h) k8kreator-msg-help ;;
    -t) shift && K8KREATOR_TARGET=$1 && shift ;;
  esac
  userinput+=($1)
  shift 1
done

# Get cluster engine from target
readonly K8KREATOR_ENGINE=$(k8kreator-get-engine)

# Get command, action, function and args to execute from array
readonly K8KREATOR_COMMAND=${userinput[0]}
readonly K8KREATOR_ACTION=${userinput[1]}
readonly K8KREATOR_FUNCTION="k8kreator-${K8KREATOR_COMMAND}-${K8KREATOR_ACTION}"

# Cleanup variable
unset userinput

# Show debug
k8kreator-msg-debug "K8KREATOR_TARGET: ${K8KREATOR_TARGET}"
k8kreator-msg-debug "K8KREATOR_ENGINE: ${K8KREATOR_ENGINE}"
k8kreator-msg-debug "K8KREATOR_FUNCTION: ${K8KREATOR_FUNCTION}"

# Use our own kubeconfig
export KUBECONFIG=${K8KREATOR_HOME}/kubeconfig

# Check if funcion exists
if ! declare -f ${K8KREATOR_FUNCTION} >/dev/null 2>&1; then
  k8kreator-msg-help
fi

# Execute function
${K8KREATOR_FUNCTION}

# End of file
