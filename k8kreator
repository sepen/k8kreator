#!/usr/bin/env bash

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

k8kreator-msg-debug() {
  local msgprefix='\033[1;33m**'
  local msgsuffix='\033[0m'
  if [ ${K8KREATOR_DEBUG} -eq 1 ]; then
    [ ${K8KREATOR_NOCOLOR} -eq 1 ] && msgprefix='[debug]'
    echo -e "${msgprefix}${msgsuffix} $@"
  fi
}

k8kreator-msg-info() {
  local msgprefix='\033[1;34m**'
  local msgsuffix='\033[0m'
  [ ${K8KREATOR_NOCOLOR} -eq 1 ] && msgprefix='**'
  echo -e "${msgprefix}${msgsuffix} $@"
}

k8kreator-msg-error() {
  local msgprefix='\033[1;31m**'
  local msgsuffix='\033[0m'
  [ ${K8KREATOR_NOCOLOR} -eq 1 ] && msgprefix='[error]'
  echo -e "${msgprefix}${msgsuffix} $@" 2>&1
  exit 1
}

k8kreator-print-version() {
  k8kreator-check-deps "git"
  k8kreator-msg-debug "Getting k8kreator version and latest git hash"
  local githash=$(cd ${K8KREATOR_SRCDIR} && git rev-parse --short HEAD)
  cat  << __VERSION__
k8kreator v${K8KREATOR_VERSION}-${githash}
__VERSION__
  exit 0
}

k8kreator-print-env() {
  k8kreator-check-deps "env" "grep" "sed"
  k8kreator-msg-debug "Printing k8kreator environment variables"
  env | grep 'K8KREATOR_' | sed 's|=| |' | while read key value; do
    printf "%-20s %-58s\n" ${key} ${value}
  done
  exit 0
}

k8kreator-print-help() {
  cat << __HELP__
Usage:
  k8kreator [command]

Available Commands:
  self      Install or update k8kreator itself
  cluster   List, create or delete clusters (it will use K8KREATOR_TARGET)
  addons    Install, update, list or uninstall addons for the cluster target
  tools     Install, update, list or uninstall tools for the cluster target
  version   Print k8kreator version information
  env       Print k8kreator environment variables
  help      Print help information

Flags:
      --debug        Enable debug messages
      --nocolor      Disable colored output mmessages
      --version      Print k8kreator version information
      --env          Print k8kreator environment variables
  -h, --help         Print help information
  -t, --target ID    Set the cluster target. Overrides K8KREATOR_TARGET from environment variable

Environment variables:

| Name               | Description                                                              |
|--------------------|--------------------------------------------------------------------------|
| K8KREATOR_DEBUG    | Indicate whether or not k8kreator is running in Debug mode               |
| K8KREATOR_HOME     | Alternative path for k8kreator's base directory (default ~/.k8kreator)   |
| K8KREATOR_TARGET   | Active cluster target. Run 'k8kreator cluster list' to get all available |
| K8KREATOR_NOCOLOR  | Disable colored output messages. Set K8KREATOR_NOCOLOR=1 to disable      |
| K8KREATOR_BINDIR   | Alternative path for binary files (default ~/.k8kreator/bin)             |
| K8KREATOR_SRCDIR   | Alternative path for source directory (default ~/.k8kreator/src)         |
| K8KREATOR_TMPDIR   | Alternative path for temporary files (default ~/.k8kreator/tmp)          |
__HELP__
  exit 0
}

k8kreator-check-deps() {
  for dep in $@; do
    # Search for the given executable in PATH (avoids a dependency on the `which` command)
    if ! type -P $dep >/dev/null 2>&1; then
      k8kreator-msg-error "Dependency '$dep' not found."
    fi
  done
}

k8kreator-get-engine() {
  local name_and_engine="${K8KREATOR_TARGET%.*}" # remove last suffix from target (e.g. .local)
  echo "${name_and_engine#*.}" # it will return the engine part of a target (e.g: kind)
}

k8kreator-get-addon-version() {
  local addon_name=$1
  # it returns addon version
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  for addon in ${K8KREATOR_ADDONS[@]}; do
    case ${addon} in
      ${addon_name}=*) echo "${addon##*=}" ;;
    esac
  done
}

k8kreator-get-tool-version() {
  local tool_name=$1
  # it returns tool version
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  for tool in ${K8KREATOR_TOOLS[@]}; do
    case ${tool} in
      ${tool_name}=*) echo "${tool##*=}" ;;
    esac
  done
}

k8kreator-get-tool-command() {
  local tool_name=$1
  local tool_version=$(k8kreator-get-tool-version ${tool_name})
  # it returns tool command and version (example: kubectl-1.27.4, helm-3.12.3, etc.)
  echo "${tool_name}-${tool_version}"
}

# =============================================================================
# SELF
# =============================================================================

k8kreator-self-install() {
  k8kreator-check-deps "mkdir" "git" "ln"
  if [ -d ${K8KREATOR_SRCDIR} ]; then
    k8kreator-msg-error "k8kreator previously installed. Please remove it or run 'self update' command."
  fi
  k8kreator-msg-debug "Installing ${K8KREATOR_SRCDIR}"
  mkdir -p ${K8KREATOR_BINDIR} ${K8KREATOR_TMPDIR}
  git clone ${K8KREATOR_GITHUB_REPO} ${K8KREATOR_SRCDIR} --quiet
  ln -svf ../src/k8kreator ${K8KREATOR_BINDIR}/k8kreator
  k8kreator-msg-info "Installed successfully!"
  k8kreator-msg-info "IMPORTANT: To finish do you need to add binaries to your PATH as for example:"
  k8kreator-msg-info "  export PATH=\$HOME/.k8kreator/bin:\$PATH"
}

k8kreator-self-update() {
  k8kreator-check-deps "git"
  if [ ! -d ${K8KREATOR_SRCDIR} ]; then
    k8kreator-msg-error "Cannot update k8kreator. You need to install it first."
  fi
  k8kreator-msg-debug "Updating ${K8KREATOR_SRCDIR}"
  cd ${K8KREATOR_SRCDIR} && git pull --rebase origin main --quiet
  k8kreator-msg-info "Updated successfully!"
}

# =============================================================================
# CLUSTER
# =============================================================================

k8kreator-cluster-list() {
  k8kreator-msg-debug "Running function k8kreator-cluster-list (target: ${K8KREATOR_TARGET})"
  k8kreator-check-deps "find" "sort"
  k8kreator-msg-info "Listing available cluster targets:"
  find ${K8KREATOR_TARGETSDIR} -mindepth 1 -maxdepth 1 -type d -exec basename {} \; \
  | sort | while read target; do
    case ${target} in
      "${K8KREATOR_TARGET}") printf "[*] %s\n" ${target} ;;
      *) printf "[ ] %s\n" ${target} ;;
    esac
  done
}

k8kreator-cluster-create() {
  k8kreator-msg-debug "Running function k8kreator-cluster-create (target: ${K8KREATOR_TARGET})"
  if [ ! -f ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/target.sh ]; then
    k8kreator-msg-error "Cluster target not found ${K8KREATOR_TARGET}"
  fi
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/target.sh
  k8kreator-msg-info "Installing and selecting tools"
  k8kreator-tools-install
  k8kreator-tools-select
  k8kreator-msg-info "Creating cluster ${K8KREATOR_TARGET}"
  k8kreator-cluster-create-target
  if [ $? -ne 0 ]; then
    k8kreator-msg-error "Command failed!"
  else
    k8kreator-msg-info "Created successfully!"
    k8kreator-msg-info "IMPORTANT: To finish do you need to export KUBECONFIG as for example:"
    k8kreator-msg-info "  export KUBECONFIG=\$HOME/.k8kreator/kubeconfig"
  fi
}

k8kreator-cluster-delete() {
  k8kreator-msg-debug "Running function k8kreator-cluster-delete (target: ${K8KREATOR_TARGET})"
  if [ ! -f ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/target.sh ]; then
    k8kreator-msg-error "Cluster target not found ${K8KREATOR_TARGET}"
  fi
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/target.sh
  k8kreator-msg-info "Deleting cluster ${K8KREATOR_TARGET}"
  k8kreator-cluster-delete-target
  k8kreator-msg-info "Uninstalling tools"
  k8kreator-tools-uninstall
  k8kreator-msg-info "Deleted successfully!"
}

# =============================================================================
# ADDONS
# =============================================================================

k8kreator-addons-list() {
  k8kreator-msg-debug "Running function k8kreator-addons-list"
  k8kreator-check-deps "find"
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  k8kreator-msg-info "Listing addons for target ${K8KREATOR_TARGET}:"
  find ${K8KREATOR_ADDONSDIR} -mindepth 1 -maxdepth 1 -type d -exec basename {} \; \
  | while read available_addon_name; do
    # Check if the addon is available for selected target
    for target_addon in ${K8KREATOR_ADDONS[@]}; do
      case ${target_addon} in
        ${available_addon_name}=*)
          target_addon_name=${target_addon%%=*}
          target_addon_version=${target_addon##*=}
          printf "%-20s  %s\n" ${target_addon_name} ${target_addon_version}
          ;;
      esac
    done
  done
}

k8kreator-addons-install() {
  k8kreator-msg-debug "Running function k8kreator-addons-install $@"
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  # Overaly list with input args
  if [ $# -ne 0 ]; then
    addons=()
    for addon_name in $@; do
      addon_version=$(k8kreator-get-addon-version ${addon_name})
      addons+=" ${addon_name}=${addon_version}"
    done
    K8KREATOR_ADDONS=(${addons})
    k8kreator-msg-debug "Selected addons: ${K8KREATOR_ADDONS}"
  fi
  # Update selected addons
  for addon in ${K8KREATOR_ADDONS[@]}; do
    addon_name=${addon%%=*}
    addon_version=${addon##*=}
    if [ ! -f ${K8KREATOR_ADDONSDIR}/${addon_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${addon_name}"
    fi
    source ${K8KREATOR_ADDONSDIR}/${addon_name}.sh
    k8kreator-msg-info "Installing addon ${addon_name} ${addon_version}"
    if ! k8kreator-addons-install-${addon_name} ${addon_version}; then
      k8kreator-msg-error "Failed to install addon ${addon_name} (${addon_version})"
    fi
  done
}

k8kreator-addons-update() {
  k8kreator-msg-debug "Running function k8kreator-addons-update $@"
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  # Overaly list with input args
  if [ $# -ne 0 ]; then
    addons=()
    for addon_name in $@; do
      addon_version=$(k8kreator-get-addon-version ${addon_name})
      addons+=" ${addon_name}=${addon_version}"
    done
    K8KREATOR_ADDONS=(${addons})
    k8kreator-msg-debug "Selected addons: ${K8KREATOR_ADDONS}"
  fi
  # Update selected addons
  for addon in ${K8KREATOR_ADDONS[@]}; do
    addon_name=${addon%%=*}
    addon_version=${addon##*=}
    if [ ! -f ${K8KREATOR_ADDONSDIR}/${addon_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${addon_name}"
    fi
    source ${K8KREATOR_ADDONSDIR}/${addon_name}.sh
    k8kreator-msg-info "Updating addon ${addon_name} ${addon_version}"
    if ! k8kreator-addons-update-${addon_name} ${addon_version}; then
      k8kreator-msg-error "Failed to update addon ${addon_name} (${addon_version})"
    fi
  done
}

k8kreator-addons-uninstall() {
  k8kreator-msg-debug "Running function k8kreator-addons-uninstall $@"
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  # Overaly list with input args
  if [ $# -ne 0 ]; then
    addons=()
    for addon_name in $@; do
      addon_version=$(k8kreator-get-addon-version ${addon_name})
      addons+=" ${addon_name}=${addon_version}"
    done
    K8KREATOR_ADDONS=(${addons})
    k8kreator-msg-debug "Selected addons: ${K8KREATOR_ADDONS}"
  fi
  # Update selected addons
  for addon in ${K8KREATOR_ADDONS[@]}; do
    addon_name=${addon%%=*}
    addon_version=${addon##*=}
    if [ ! -f ${K8KREATOR_ADDONSDIR}/${addon_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${addon_name}"
    fi
    source ${K8KREATOR_ADDONSDIR}/${addon_name}.sh
    k8kreator-msg-info "Uninstalling addon ${addon_name} ${addon_version}"
    if ! k8kreator-addons-uninstall-${addon_name} ${addon_version}; then
      k8kreator-msg-error "Failed to uninstall addon ${addon_name} (${addon_version})"
    fi
  done
}

# =============================================================================
# TOOLS
# =============================================================================

k8kreator-tools-list() {
  k8kreator-msg-debug "Running function k8kreator-tools-list"
  k8kreator-check-deps "find"
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  k8kreator-msg-info "Listing tools for target ${K8KREATOR_TARGET}:"
  find ${K8KREATOR_TOOLSDIR} -type f -name '*.sh' -exec basename {} .sh \; \
  | while read available_tool_name; do
    # Check if the tool is available for selected target
    for target_tool in ${K8KREATOR_TOOLS[@]}; do
      case ${target_tool} in
        ${available_tool_name}*)
          target_tool_name=${target_tool%%=*}
          target_tool_version=${target_tool##*=}
          printf "%-20s  %s\n" ${target_tool_name} ${target_tool_version}
          ;;
      esac
    done
  done

}

k8kreator-tools-install() {
  k8kreator-msg-debug "Running function k8kreator-tools-install $@"
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  # Overaly list with input args
  if [ $# -ne 0 ]; then
    tools=()
    for tool_name in $@; do
      tool_version=$(k8kreator-get-tool-version ${tool_name})
      tools+=" ${tool_name}=${tool_version}"
    done
    K8KREATOR_TOOLS=(${tools})
  fi
  # Install selected tools
  for tool in ${K8KREATOR_TOOLS[@]}; do
    tool_name=${tool%%=*}
    tool_version=${tool##*=}
    if [ ! -f ${K8KREATOR_TOOLSDIR}/${tool_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${tool_name}"
    fi
    source ${K8KREATOR_TOOLSDIR}/${tool_name}.sh
    k8kreator-msg-info "Installing tool ${tool_name} ${tool_version}"
    k8kreator-tools-install-${tool_name} ${tool_version} || k8kreator-msg-error "Install failed"
  done
}

k8kreator-tools-select() {
  k8kreator-msg-debug "Running function k8kreator-tools-select $@"
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  # Overaly list with input args
  if [ $# -ne 0 ]; then
    tools=()
    for tool_name in $@; do
      tool_version=$(k8kreator-get-tool-version ${tool_name})
      tools+=("${tool_name}=${tool_version}")
    done
    K8KREATOR_TOOLS=(${tools})
  fi
  # Update selected tools
  for tool in ${K8KREATOR_TOOLS[@]}; do
    tool_name=${tool%%=*}
    tool_version=${tool##*=}
    if [ ! -f ${K8KREATOR_TOOLSDIR}/${tool_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${tool_name}"
    fi
    source ${K8KREATOR_TOOLSDIR}/${tool_name}.sh
    k8kreator-msg-info "Selecting tool ${tool_name} ${tool_version}"
    k8kreator-tools-select-${tool_name} ${tool_version} || k8kreator-msg-error "Update failed"
  done
}

k8kreator-tools-uninstall() {
  k8kreator-msg-debug "Running function k8kreator-tools-uninstall $@"
  source ${K8KREATOR_TARGETSDIR}/${K8KREATOR_TARGET}/env.sh
  # Overaly list with input args
  if [ $# -ne 0 ]; then
    tools=()
    for tool_name in $@; do
      tool_version=$(k8kreator-get-tool-version ${tool_name})
      tools+=("${tool_name}=${tool_version}")
    done
    K8KREATOR_TOOLS=(${tools})
  fi
  # Uninstall selected tools
  for tool in ${K8KREATOR_TOOLS[@]}; do
    tool_name=${tool%%=*}
    tool_version=${tool##*=}
    if [ ! -f ${K8KREATOR_TOOLSDIR}/${tool_name}.sh ]; then
      k8kreator-msg-error "Addon not found ${tool_name}"
    fi
    source ${K8KREATOR_TOOLSDIR}/${tool_name}.sh
    k8kreator-msg-info "Uninstalling tool ${tool_name} ${tool_version}"
    k8kreator-tools-uninstall-${tool_name} ${tool_version} || k8kreator-msg-error "Uninstall failed"
  done
}

# =============================================================================
# MAIN
# =============================================================================

# Fail fast with a concise message when not using bash
if [ -z "${BASH_VERSION:-}" ]; then
  k8kreator-msg-error "Bash is required to interpret this script"
fi

# Readonly variables
readonly K8KREATOR_VERSION="0.0.1"
readonly K8KREATOR_GITHUB_REPO="https://github.com/sepen/k8kreator"

# Other global variables
export K8KREATOR_NOCOLOR=${K8KREATOR_NOCOLOR:-0}
export K8KREATOR_DEBUG=${K8KREATOR_DEBUG:-0}
export K8KREATOR_HOME="${K8KREATOR_HOME:-${HOME}/.k8kreator}"
export K8KREATOR_BINDIR="${K8KREATOR_BINDIR:-${K8KREATOR_HOME}/bin}"
export K8KREATOR_SRCDIR="${K8KREATOR_SRCDIR:-${K8KREATOR_HOME}/src}"
export K8KREATOR_TMPDIR="${K8KREATOR_TMPDIR:-${K8KREATOR_HOME}/tmp}"
export K8KREATOR_TARGETSDIR="${K8KREATOR_TARGETSSDIR:-${K8KREATOR_TARGETSDIR}}"
export K8KREATOR_TOOLSDIR="${K8KREATOR_TOOLSSDIR:-${K8KREATOR_SRCDIR}/tools}"
export K8KREATOR_ADDONSDIR="${K8KREATOR_ADDONSDIR:-${K8KREATOR_SRCDIR}/addons}"

# Obtain target from environment or input command args, otherwise use defaults.
export K8KREATOR_TARGET=${K8KREATOR_TARGET:-default.kind.local}

# Check for args
[ $# -eq 0 ] && k8kreator-print-help

# Get target and save the rest to an array
userinput=()
while [ $1 ]; do
  case $1 in
    --nocolor) shift && K8KREATOR_NOCOLOR=1 && continue ;;
    --debug) shift && K8KREATOR_DEBUG=1 && continue;;
    --version|version) k8kreator-print-version ;;
    --env|env) k8kreator-print-env ;;
    -h|--help|help) k8kreator-print-help ;;
    -t|--target) shift && K8KREATOR_TARGET=$1 && shift ;;
  esac
  userinput+=($1)
  shift 1
done

# Get cluster engine from target
K8KREATOR_ENGINE=$(k8kreator-get-engine)

# Get command, action and function to execute
K8KREATOR_COMMAND=${userinput[0]}
K8KREATOR_ACTION=${userinput[1]}
K8KREATOR_FUNCTION="k8kreator-${K8KREATOR_COMMAND}-${K8KREATOR_ACTION}"

# Extra input args
unset userinput[0] userinput[1]
K8KREATOR_FUNCTION_ARGS=${userinput[@]}

# Cleanup variable
unset userinput

# Show debug
k8kreator-msg-debug "K8KREATOR_TARGET: ${K8KREATOR_TARGET}"
k8kreator-msg-debug "K8KREATOR_ENGINE: ${K8KREATOR_ENGINE}"
k8kreator-msg-debug "K8KREATOR_FUNCTION: ${K8KREATOR_FUNCTION}"

# Use our own kubeconfig
export KUBECONFIG=${K8KREATOR_HOME}/kubeconfig

# Check if funcion exists
if ! declare -f ${K8KREATOR_FUNCTION} >/dev/null 2>&1; then
  k8kreator-print-help
fi


# Execute function
${K8KREATOR_FUNCTION} ${K8KREATOR_FUNCTION_ARGS}

# End of file
